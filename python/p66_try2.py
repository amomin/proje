
import math
maxtocheck = 1000

def isSq(n):
	if n == int(math.sqrt(n))**2:
		return True
	else:
		return False

D = 2
valueofD = 2
maxsofar = 0
valuesmissed = []
#_testfrom=100000
#_testupto=1000000
#_list = range(1,maxtocheck+1)
#Those where y is at least 100000
#_list = [61, 73, 94, 97, 106, 109, 113, 124, 127, 133, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 202, 211, 214, 217, 229, 233, 239, 241, 244, 249, 250, 251, 253, 261, 262, 265, 268, 271, 274, 277, 281, 283, 284, 292, 293, 295, 298, 301, 302, 307, 309, 311, 313, 317, 319, 329, 331, 334, 337, 341, 343, 349, 353, 358, 364, 365, 367, 369, 373, 376, 379, 382, 388, 389, 391, 393, 394, 397, 406, 409, 412, 415, 417, 419, 421, 422, 424, 430, 431, 433, 436, 445, 446, 449, 451, 454, 457, 460, 461, 463, 466, 471, 477, 478, 479, 481, 487, 489, 491, 493, 496, 501, 502, 508, 509, 511, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 537, 538, 541, 542, 547, 548, 549, 550, 553, 554, 556, 559, 562, 565, 566, 569, 571, 581, 583, 586, 589, 593, 596, 597, 599, 601, 604, 606, 607, 610, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 636, 637, 639, 641, 643, 647, 649, 652, 653, 654, 655, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 683, 685, 686, 688, 691, 694, 698, 700, 701, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 745, 746, 748, 749, 751, 753, 754, 757, 758, 763, 764, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 805, 806, 807, 808, 809, 811, 814, 821, 823, 826, 829, 831, 833, 834, 835, 838, 844, 845, 847, 849, 851, 853, 856, 857, 859, 861, 862, 863, 865, 868, 869, 871, 873, 877, 878, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 916, 917, 918, 919, 921, 922, 926, 928, 929, 931, 932, 937, 941, 946, 947, 949, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 974, 976, 977, 981, 988, 989, 991, 995, 996, 997, 998, 999, 1000]
#Those where y is at least 1000000
_testfrom=1000000
_testupto=2000000
_list = [61, 97, 106, 109, 139, 149, 151, 157, 163, 166, 172, 181, 193, 199, 202, 211, 214, 233, 241, 244, 250, 253, 261, 262, 265, 268, 271, 277, 281, 283, 284, 298, 301, 307, 309, 313, 317, 331, 334, 337, 343, 349, 353, 358, 365, 367, 373, 379, 382, 388, 393, 394, 397, 406, 409, 412, 417, 419, 421, 424, 431, 433, 436, 445, 446, 449, 451, 454, 457, 461, 463, 466, 477, 478, 481, 487, 489, 491, 493, 501, 502, 508, 509, 511, 517, 521, 523, 524, 526, 533, 537, 538, 541, 547, 549, 550, 553, 554, 556, 559, 562, 565, 566, 569, 571, 581, 586, 589, 593, 596, 597, 599, 601, 604, 606, 607, 610, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 637, 641, 643, 647, 649, 652, 653, 655, 661, 662, 664, 666, 667, 669, 673, 679, 681, 683, 685, 686, 691, 694, 698, 701, 709, 716, 718, 719, 721, 724, 733, 737, 739, 742, 746, 749, 751, 753, 754, 757, 758, 763, 764, 766, 769, 771, 772, 773, 778, 781, 787, 789, 790, 794, 796, 797, 801, 802, 805, 807, 809, 811, 814, 821, 823, 826, 829, 834, 835, 838, 844, 845, 849, 853, 856, 857, 859, 861, 862, 863, 865, 869, 871, 873, 877, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 917, 919, 921, 922, 926, 928, 929, 931, 932, 937, 941, 946, 947, 949, 951, 953, 954, 955, 956, 958, 964, 965, 967, 970, 971, 972, 974, 976, 977, 981, 988, 989, 991, 997, 998, 999, 1000]
# y is at least 2000000:
_list = [61, 97, 106, 109, 139, 149, 151, 157, 163, 166, 181, 193, 199, 211, 214, 233, 241, 244, 250, 253, 261, 262, 265, 268, 271, 277, 281, 283, 298, 301, 307, 309, 313, 317, 331, 334, 337, 343, 349, 353, 358, 367, 373, 379, 382, 388, 393, 394, 397, 406, 409, 412, 417, 419, 421, 431, 433, 436, 445, 446, 449, 451, 454, 457, 461, 463, 466, 477, 478, 481, 487, 489, 491, 493, 501, 502, 508, 509, 511, 517, 521, 523, 524, 526, 533, 537, 538, 541, 547, 549, 553, 554, 556, 559, 562, 565, 566, 569, 571, 581, 586, 589, 593, 596, 597, 599, 601, 604, 607, 610, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 637, 641, 643, 647, 649, 652, 653, 655, 661, 662, 664, 667, 669, 673, 679, 681, 683, 685, 686, 691, 694, 701, 709, 716, 718, 719, 721, 724, 733, 737, 739, 742, 746, 749, 751, 753, 754, 757, 758, 763, 764, 766, 769, 771, 772, 773, 778, 781, 787, 789, 790, 794, 796, 797, 801, 802, 805, 809, 811, 814, 821, 823, 826, 829, 834, 835, 838, 844, 845, 849, 853, 856, 857, 859, 861, 862, 863, 865, 869, 871, 873, 877, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 917, 919, 921, 922, 926, 928, 929, 931, 932, 937, 941, 946, 947, 949, 951, 953, 955, 956, 958, 964, 965, 967, 970, 971, 972, 974, 976, 977, 981, 988, 989, 991, 997, 998, 999]
#while D < maxtocheck+1:
for D in _list:
	y = 0
	if not isSq(D):
		flag = False
		#y =1
		y =_testfrom
		while not flag and y <_testupto+1:
			n = 1 + D*y*y
			if isSq(n):
				flag = True
				print "x,D,y is", math.sqrt(n), D, y
				if n > maxsofar:
					maxsofar = n
					valueofD = D
			y+=1
			if y == _testupto:
				valuesmissed.append(D)
	#D +=1

print valueofD, math.sqrt(maxsofar)
print valuesmissed

#List of D's needed to check
#
# For 61, the first value of x for which x**2-D*y**2 = 1 has a solution is 42912791 (there are others:                                                                                                                                                         54502816
#66092841
#74235557
#85825582
#97415607
#105558323
#109005632

					
