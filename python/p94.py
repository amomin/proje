import math,sys, time
sys.path.insert(0,'./lib')
from NumberTheory import gcd

#Use the fact that pythagorean triples are generated by squares (take a > b below):
#
# m = a^2-b^2,
# n = 2ab
# p = a^2 + b^2
#
# m^2 +n^2 = p^2
#
# The triple is primitive if a,b are coprime and a-b is odd
# For this problem, non primite pairs will clearly fail
# beacuse the sidelength difference will be at least k
# So we will only consider primitive paris

SLUPTO=1000000000
MAX=int(math.ceil(math.sqrt(SLUPTO/3 + 1)))

count=0
for b in range(1,MAX+1):
	innerMax=int(math.ceil(math.sqrt(MAX**2-b**2+1)))
	for a in range(b+1,innerMax):
		if not (gcd(a,b)==1 and ((a-b)%2)==1):
			continue
		m=a**2-b**2
		n=2*a*b
		p=a**2+b**2

		#print m,n,p, "m^2 + n^2 = ",m**2+n**2, " = p^2 = ", p**2

		if abs(2*m-p)<2:
			#print m,n,p, "2m =",2*m, ", p =",p
			term=p+p+2*m
			print "Perimeter of m,n,p=",m,n,p," is ",term
		elif abs(2*n-p)<2:
			#print m,n,p, "2n =",2*n, ", p =",p
			term=p+p+2*n
			print "Perimeter of m,n,p=",m,n,p," is ",term
		else:
			term=0
		if term>0 and term<SLUPTO+1:
			count+=term

print "Total count is ", count
